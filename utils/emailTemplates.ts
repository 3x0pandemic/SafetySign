interface Attendee {
  id: string;
  name: string;
  isPresent: boolean;
  signature?: string;
  absentReason?: string;
  date: string;
}

interface MeetingInfo {
  date: string;
  location: string;
  facilitator: string;
  topic: string;
  expectedCount: number;
}

export const generateEmailSubject = (meetingInfo: MeetingInfo): string => {
  const topic = meetingInfo.topic || 'Safety Training';
  const date = new Date(meetingInfo.date).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
  
  return `Safety Meeting Attendance - ${topic} - ${date}`;
};

export const generateEmailBody = (
  meetingInfo: MeetingInfo,
  attendees: Attendee[]
): string => {
  const filledAttendees = attendees.filter(a => a.name.trim());
  const presentAttendees = filledAttendees.filter(a => a.isPresent);
  const absentAttendees = filledAttendees.filter(a => !a.isPresent);
  const signedCount = presentAttendees.filter(a => a.signature).length;
  const unsignedCount = presentAttendees.length - signedCount;

  let body = `SAFETY MEETING ATTENDANCE REPORT\n`;
  body += `${'='.repeat(50)}\n\n`;
  
  // Meeting Details
  body += `MEETING DETAILS:\n`;
  body += `• Date: ${new Date(meetingInfo.date).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })}\n`;
  body += `• Location: ${meetingInfo.location || 'Not specified'}\n`;
  body += `• Facilitator: ${meetingInfo.facilitator || 'Not specified'}\n`;
  body += `• Topic: ${meetingInfo.topic || 'General Safety Training'}\n`;
  body += `• Expected Attendees: ${meetingInfo.expectedCount}\n\n`;
  
  // Summary Statistics
  body += `ATTENDANCE SUMMARY:\n`;
  body += `• Present & Signed: ${signedCount}\n`;
  body += `• Present but Not Signed: ${unsignedCount}\n`;
  body += `• Absent: ${absentAttendees.length}\n`;
  body += `• Total Recorded: ${filledAttendees.length}/${meetingInfo.expectedCount}\n`;
  body += `• Completion Rate: ${Math.round((signedCount / meetingInfo.expectedCount) * 100)}%\n\n`;
  
  // Present Attendees
  if (presentAttendees.length > 0) {
    body += `ATTENDEES PRESENT (${presentAttendees.length}):\n`;
    body += `${'-'.repeat(30)}\n`;
    
    presentAttendees.forEach((attendee, index) => {
      const status = attendee.signature ? '✓ Signed' : '⚠ Not Signed';
      const date = new Date(attendee.date).toLocaleDateString('en-US');
      body += `${index + 1}. ${attendee.name} - ${status} (${date})\n`;
    });
    body += '\n';
  }
  
  // Absent Attendees
  if (absentAttendees.length > 0) {
    body += `ABSENTEES (${absentAttendees.length}):\n`;
    body += `${'-'.repeat(20)}\n`;
    
    absentAttendees.forEach((attendee, index) => {
      const reason = attendee.absentReason || 'Reason not specified';
      body += `${index + 1}. ${attendee.name} - ${reason}\n`;
    });
    body += '\n';
  }
  
  // Compliance Notes
  body += `COMPLIANCE & DOCUMENTATION:\n`;
  body += `${'-'.repeat(35)}\n`;
  body += `• This attendance record was generated digitally using approved safety meeting software\n`;
  body += `• Electronic signatures are legally equivalent to handwritten signatures per company policy\n`;
  body += `• Document generated by: ${meetingInfo.facilitator || 'System Administrator'}\n`;
  body += `• Report timestamp: ${new Date().toLocaleString('en-US')}\n\n`;
  
  // Action Items (if any unsigned attendees)
  if (unsignedCount > 0) {
    body += `ACTION REQUIRED:\n`;
    body += `${'-'.repeat(20)}\n`;
    body += `• ${unsignedCount} attendee(s) present but missing signatures\n`;
    body += `• Follow up required for complete documentation\n`;
    body += `• Ensure all present attendees provide digital signatures\n\n`;
  }
  
  // Footer
  body += `This report was automatically generated by the Safety Meeting Attendance System.\n`;
  body += `For questions or concerns, please contact the meeting facilitator or safety department.\n\n`;
  body += `Complete signed document is available as PDF attachment.`;

  return body;
};

export const getDefaultRecipients = (meetingInfo: MeetingInfo): string[] => {
  // Default recipients for safety meeting reports
  const recipients = ['safety@company.com'];
  
  // Add facilitator email if it looks like an email
  if (meetingInfo.facilitator && meetingInfo.facilitator.includes('@')) {
    recipients.push(meetingInfo.facilitator);
  }
  
  return recipients;
};

export const generateQuickEmailBody = (
  meetingInfo: MeetingInfo,
  attendees: Attendee[]
): string => {
  const filledAttendees = attendees.filter(a => a.name.trim());
  const signedCount = filledAttendees.filter(a => a.isPresent && a.signature).length;
  const absentCount = filledAttendees.filter(a => !a.isPresent).length;
  
  return `Safety meeting completed for ${meetingInfo.topic || 'General Safety Training'} on ${meetingInfo.date}.

${signedCount} attendees signed, ${absentCount} absent.

Full report attached as PDF.

- ${meetingInfo.facilitator || 'Meeting Facilitator'}`;
};